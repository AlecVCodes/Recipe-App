{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alect\\\\Contacts\\\\Desktop\\\\recipe-app\\\\frontend\\\\src\\\\components\\\\HomeRecipes.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [recipes, setRecipes] = useState(null);\nconst {\n  recipeType\n} = useParams(); // Access URL parameter for recipe type\n\nuseEffect(() => {\n  const fetchRecipes = async () => {\n    try {\n      const response = await fetch(\"/api/recipes\");\n      if (!response.ok) {\n        console.error(`Failed to fetch recipes. Status: ${response.status}`);\n        return;\n      }\n      const json = await response.json();\n      setRecipes(json);\n      console.log(json);\n    } catch (error) {\n      console.error(\"Error during fetch:\", error);\n    }\n  };\n  fetchRecipes();\n}, []);\nconst saveUserRecipes = async recipeId => {\n  try {\n    const response = await fetch(`/api/recipes/${recipeId}`);\n    if (!response.ok) {\n      console.error(`Failed to fetch recipe with ID ${recipeId}. Status: ${response.status}`);\n      return;\n    }\n    const savedRecipe = await response.json();\n    const postResponse = await fetch(\"/api/userRecipes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(savedRecipe)\n    });\n    if (!postResponse.ok) {\n      console.error(\"Failed to post recipe to UserRecipes schema.\");\n      return;\n    }\n    console.log(\"Recipe saved successfully:\", savedRecipe);\n  } catch (error) {\n    console.error(\"Error during fetch:\", error);\n  }\n};\nfunction HomeRecipes() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipes\",\n    children: recipes && recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: recipe.img,\n        alt: \"food-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: recipe.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-recipe-btn\",\n        onClick: () => saveUserRecipes(recipe._id),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, recipe._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_c = HomeRecipes;\nexport default HomeRecipes;\nvar _c;\n$RefreshReg$(_c, \"HomeRecipes\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","recipes","setRecipes","recipeType","fetchRecipes","response","fetch","ok","console","error","status","json","log","saveUserRecipes","recipeId","savedRecipe","postResponse","method","headers","body","JSON","stringify","HomeRecipes","className","children","map","recipe","src","img","alt","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/components/HomeRecipes.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Ingredient {\r\n  name: string;\r\n  quantity: number;\r\n  unit: string;\r\n}\r\n\r\ninterface Recipe {\r\n  img: string;\r\n  _id: string;\r\n  title: string;\r\n  ingredients: Ingredient[];\r\n}\r\n\r\nconst [recipes, setRecipes] = useState<Recipe[] | null>(null);\r\nconst { recipeType } = useParams(); // Access URL parameter for recipe type\r\n\r\nuseEffect(() => {\r\n  const fetchRecipes = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/recipes\");\r\n      if (!response.ok) {\r\n        console.error(`Failed to fetch recipes. Status: ${response.status}`);\r\n        return;\r\n      }\r\n      const json = await response.json();\r\n      setRecipes(json);\r\n      console.log(json);\r\n    } catch (error) {\r\n      console.error(\"Error during fetch:\", error);\r\n    }\r\n  };\r\n\r\n  fetchRecipes();\r\n}, []);\r\n\r\nconst saveUserRecipes = async (recipeId: string) => {\r\n  try {\r\n    const response = await fetch(`/api/recipes/${recipeId}`);\r\n    if (!response.ok) {\r\n      console.error(\r\n        `Failed to fetch recipe with ID ${recipeId}. Status: ${response.status}`\r\n      );\r\n      return;\r\n    }\r\n    const savedRecipe = await response.json();\r\n\r\n    const postResponse = await fetch(\"/api/userRecipes\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(savedRecipe),\r\n    });\r\n\r\n    if (!postResponse.ok) {\r\n      console.error(\"Failed to post recipe to UserRecipes schema.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Recipe saved successfully:\", savedRecipe);\r\n  } catch (error) {\r\n    console.error(\"Error during fetch:\", error);\r\n  }\r\n};\r\n\r\nfunction HomeRecipes() {\r\n  return (\r\n    <div className=\"recipes\">\r\n      {recipes &&\r\n        recipes.map((recipe) => (\r\n          <div key={recipe._id}>\r\n            <img src={recipe.img} alt=\"food-img\"></img>\r\n            <p>{recipe.title}</p>\r\n            <button\r\n              className=\"save-recipe-btn\"\r\n              onClick={() => saveUserRecipes(recipe._id)}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeRecipes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}