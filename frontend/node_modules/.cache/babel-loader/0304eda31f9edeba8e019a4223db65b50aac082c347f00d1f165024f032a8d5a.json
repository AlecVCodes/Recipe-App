{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alect\\\\Contacts\\\\Desktop\\\\recipe-app\\\\frontend\\\\src\\\\pages\\\\IndividualRecipe.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { UseAuthContext } from '../hooks/useAuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IndividualUserRecipe() {\n  _s();\n  const {\n    user\n  } = UseAuthContext();\n  const {\n    id\n  } = useParams(); // Make the 'id' parameter optional\n  const [recipe, setRecipe] = useState(null);\n\n  // Check local storage for the recipe data on component mount\n  useEffect(() => {\n    const storedRecipe = localStorage.getItem(`recipe_${id}`);\n    if (storedRecipe) {\n      // Parse the stored recipe data\n      const parsedRecipe = JSON.parse(storedRecipe);\n      setRecipe(parsedRecipe);\n    } else {\n      // If not found in local storage, fetch the recipe data\n      fetchRecipeData();\n    }\n  }, [id]);\n  const fetchRecipeData = async () => {\n    if (id) {\n      try {\n        const response = await fetch(`/api/recipes/${id}`, {\n          headers: {\n            Authorization: `Bearer ${user.token}`\n          }\n        }); // Adjust the API endpoint to match your backend\n        if (response.ok) {\n          const data = await response.json();\n          setRecipe(data);\n\n          // Store the fetched recipe data in local storage\n          localStorage.setItem(`recipe_${id}`, JSON.stringify(data));\n        } else {\n          // Handle error when the recipe is not found\n        }\n      } catch (error) {\n        // Handle any fetch errors\n      }\n    }\n  };\n  if (!recipe) {\n    // Render a loading indicator or an error message here\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: recipe.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [recipe.ingredients.map((ingredient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [ingredient.name, \": \", ingredient.quantity, \" \", ingredient.unit]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: recipe.img,\n        alt: recipe.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(IndividualUserRecipe, \"mspyGayhjAFc7aood8Dr22WglZg=\", false, function () {\n  return [useParams];\n});\n_c = IndividualUserRecipe;\nexport default IndividualRecipe;\nvar _c;\n$RefreshReg$(_c, \"IndividualUserRecipe\");","map":{"version":3,"names":["React","useEffect","useState","useParams","UseAuthContext","jsxDEV","_jsxDEV","IndividualUserRecipe","_s","user","id","recipe","setRecipe","storedRecipe","localStorage","getItem","parsedRecipe","JSON","parse","fetchRecipeData","response","fetch","headers","Authorization","token","ok","data","json","setItem","stringify","error","children","fileName","_jsxFileName","lineNumber","columnNumber","title","ingredients","map","ingredient","index","name","quantity","unit","src","img","alt","_c","IndividualRecipe","$RefreshReg$"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/pages/IndividualRecipe.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { UseAuthContext } from '../hooks/useAuthContext';\r\nimport { Recipe } from '../components/HomeRecipes';\r\n\r\nfunction IndividualUserRecipe() {\r\n  const { user } = UseAuthContext();\r\n  const { id } = useParams<{ id?: string }>(); // Make the 'id' parameter optional\r\n  const [recipe, setRecipe] = useState<Recipe | null>(null);\r\n\r\n  // Check local storage for the recipe data on component mount\r\n  useEffect(() => {\r\n    const storedRecipe = localStorage.getItem(`recipe_${id}`);\r\n    if (storedRecipe) {\r\n      // Parse the stored recipe data\r\n      const parsedRecipe = JSON.parse(storedRecipe);\r\n      setRecipe(parsedRecipe);\r\n    } else {\r\n      // If not found in local storage, fetch the recipe data\r\n      fetchRecipeData();\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchRecipeData = async () => {\r\n    if (id) {\r\n      try {\r\n        const response = await fetch(`/api/recipes/${id}`, {\r\n          headers: { Authorization: `Bearer ${user.token}` }\r\n        }); // Adjust the API endpoint to match your backend\r\n        if (response.ok) {\r\n          const data: Recipe = await response.json();\r\n          setRecipe(data);\r\n\r\n          // Store the fetched recipe data in local storage\r\n          localStorage.setItem(`recipe_${id}`, JSON.stringify(data));\r\n        } else {\r\n          // Handle error when the recipe is not found\r\n        }\r\n      } catch (error) {\r\n        // Handle any fetch errors\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!recipe) {\r\n    // Render a loading indicator or an error message here\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{recipe.title}</h1>\r\n      <ul>\r\n        {recipe.ingredients.map((ingredient, index) => (\r\n          <li key={index}>\r\n            {ingredient.name}: {ingredient.quantity} {ingredient.unit}\r\n          </li>\r\n        ))}\r\n        <img src={recipe.img} alt={recipe.img} />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IndividualRecipe;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}