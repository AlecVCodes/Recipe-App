{"ast":null,"code":"var _s = $RefreshSig$();\nimport { UseAuthContext } from \"./useAuthContext\";\nimport { useState } from \"react\";\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  // Context\n  const {\n    dispatch\n  } = UseAuthContext();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const data = {\n      email,\n      password\n    };\n    try {\n      const response = await fetch(\"/api/user/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const json = await response.json();\n        setIsLoading(false);\n        setError(json.error);\n        console.log(json.error, \"JSON ERROR\");\n        return;\n      }\n      const json = await response.json();\n\n      // Store user data from the server response in local storage\n      localStorage.setItem(\"user\", JSON.stringify(json));\n\n      // Update auth context\n      dispatch({\n        type: \"LOGIN\",\n        payload: json\n      });\n\n      // Fetch the user's role from another endpoint\n      const roleResponse = await fetch(\"/api/user/role\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${json.token}`\n        }\n      });\n      if (roleResponse.ok) {\n        const roleData = await roleResponse.json();\n        console.log(roleData, \"role data\");\n\n        // Update user data with the role and store it in local storage\n        const userWithRole = {\n          ...json,\n          role: roleData.role\n        };\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\n        dispatch({\n          type: \"LOGIN\",\n          payload: userWithRole\n        });\n        const isTokenExpired = token => {\n          const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\n          return decodedToken.exp * 1000 < Date.now();\n        };\n      }\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      setIsLoading(false);\n      setError(\"An unexpected error occurred during login\");\n    }\n  };\n  const isTokenExpired = token => {\n    const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\n    return decodedToken.exp * 1000 < Date.now();\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"oSmfmuW5T4Yczc8SMzWJFCrcXbA=\");","map":{"version":3,"names":["UseAuthContext","useState","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","login","email","password","data","response","fetch","method","headers","body","JSON","stringify","ok","json","console","log","localStorage","setItem","type","payload","roleResponse","Authorization","token","roleData","userWithRole","role","isTokenExpired","decodedToken","parse","atob","split","exp","Date","now"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/hooks/useLoginHook.tsx"],"sourcesContent":["import { UseAuthContext } from \"./useAuthContext\";\r\nimport { useState } from \"react\";\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean | null>(null);\r\n\r\n  // Context\r\n  const { dispatch } = UseAuthContext();\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    const data = { email, password };\r\n\r\n    try {\r\n      const response = await fetch(\"/api/user/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const json = await response.json();\r\n        setIsLoading(false);\r\n        setError(json.error);\r\n        console.log(json.error, \"JSON ERROR\");\r\n        return;\r\n      }\r\n\r\n      const json = await response.json();\r\n\r\n      // Store user data from the server response in local storage\r\n      localStorage.setItem(\"user\", JSON.stringify(json));\r\n\r\n      // Update auth context\r\n      dispatch({ type: \"LOGIN\", payload: json });\r\n\r\n      // Fetch the user's role from another endpoint\r\n      const roleResponse = await fetch(\"/api/user/role\", {\r\n        method: \"GET\",\r\n        headers: { Authorization: `Bearer ${json.token}` },\r\n      });\r\n\r\n      if (roleResponse.ok) {\r\n        const roleData = await roleResponse.json();\r\n        console.log(roleData, \"role data\");\r\n\r\n        // Update user data with the role and store it in local storage\r\n        const userWithRole = { ...json, role: roleData.role };\r\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\r\n        dispatch({ type: \"LOGIN\", payload: userWithRole });\r\n\r\n \r\n        const isTokenExpired = (token: string): boolean => {\r\n          const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\r\n          return decodedToken.exp * 1000 < Date.now();\r\n        };\r\n      \r\n      }\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error during login:\", error);\r\n      setIsLoading(false);\r\n      setError(\"An unexpected error occurred during login\");\r\n    }\r\n  };\r\n\r\n  const isTokenExpired = (token: string): boolean => {\r\n    const decodedToken = JSON.parse(atob(token.split(\".\")[1])) as { exp: number };\r\n    return decodedToken.exp * 1000 < Date.now();\r\n  };\r\n\r\n  return { login, isLoading, error };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}