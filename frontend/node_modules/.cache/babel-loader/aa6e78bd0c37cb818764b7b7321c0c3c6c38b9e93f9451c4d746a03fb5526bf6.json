{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alect\\\\Contacts\\\\Desktop\\\\recipe-app\\\\frontend\\\\src\\\\components\\\\HomeRecipes.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomeRecipes() {\n  _s();\n  const [recipes, setRecipes] = useState(null);\n  const [error, setError] = useState(null); // Add state for error message\n\n  useEffect(() => {\n    // ... (unchanged)\n  }, []);\n  const saveUserRecipes = async recipeId => {\n    try {\n      // Check if the recipe is already saved\n      const existingRecipeResponse = await fetch(`/api/userRecipes/${recipeId}`);\n      if (existingRecipeResponse.ok) {\n        const existingRecipe = await existingRecipeResponse.json();\n        setError(`Recipe with ID ${recipeId} is already saved.`);\n        return;\n      }\n\n      // Fetch the recipe to be saved\n      const response = await fetch(`/api/recipes/${recipeId}`);\n      if (!response.ok) {\n        console.error(`Failed to fetch recipe with ID ${recipeId}. Status: ${response.status}`);\n        setError(`Failed to fetch recipe with ID ${recipeId}.`);\n        return;\n      }\n      const savedRecipe = await response.json();\n\n      // Save the recipe to the UserRecipes schema\n      const postResponse = await fetch(\"/api/userRecipes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(savedRecipe)\n      });\n      if (!postResponse.ok) {\n        console.error(\"Failed to post recipe to UserRecipes schema.\");\n        setError(`Failed to save recipe with ID ${recipeId}.`);\n        return;\n      }\n      console.log(\"Recipe saved successfully:\", savedRecipe);\n    } catch (error) {\n      console.error(\"Error during fetch:\", error);\n      setError(`Error during fetch: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"recipes\",\n    children: [recipes && recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: recipe.img,\n        alt: \"food-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: recipe.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-recipe-btn\",\n        onClick: () => {\n          saveUserRecipes(recipe._id);\n          setError(null); // Clear any previous error when attempting to save a new recipe\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)]\n    }, recipe._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(HomeRecipes, \"sl+0X8+rzCTCVFqZAYvprdOGYOg=\");\n_c = HomeRecipes;\nexport default HomeRecipes;\nvar _c;\n$RefreshReg$(_c, \"HomeRecipes\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","HomeRecipes","_s","recipes","setRecipes","error","setError","saveUserRecipes","recipeId","existingRecipeResponse","fetch","ok","existingRecipe","json","response","console","status","savedRecipe","postResponse","method","headers","body","JSON","stringify","log","message","className","children","map","recipe","src","img","alt","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/components/HomeRecipes.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Ingredient {\r\n  name: string;\r\n  quantity: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface Recipe {\r\n  img: string;\r\n  _id: string;\r\n  title: string;\r\n  ingredients: Ingredient[];\r\n}\r\n\r\nfunction HomeRecipes() {\r\n  const [recipes, setRecipes] = useState<Recipe[] | null>(null);\r\n  const [error, setError] = useState<string | null>(null); // Add state for error message\r\n\r\n  useEffect(() => {\r\n    // ... (unchanged)\r\n  }, []);\r\n\r\n  const saveUserRecipes = async (recipeId: string) => {\r\n    try {\r\n      // Check if the recipe is already saved\r\n      const existingRecipeResponse = await fetch(\r\n        `/api/userRecipes/${recipeId}`\r\n      );\r\n      if (existingRecipeResponse.ok) {\r\n        const existingRecipe = await existingRecipeResponse.json();\r\n        setError(`Recipe with ID ${recipeId} is already saved.`);\r\n        return;\r\n      }\r\n\r\n      // Fetch the recipe to be saved\r\n      const response = await fetch(`/api/recipes/${recipeId}`);\r\n      if (!response.ok) {\r\n        console.error(\r\n          `Failed to fetch recipe with ID ${recipeId}. Status: ${response.status}`\r\n        );\r\n        setError(`Failed to fetch recipe with ID ${recipeId}.`);\r\n        return;\r\n      }\r\n      const savedRecipe = await response.json();\r\n\r\n      // Save the recipe to the UserRecipes schema\r\n      const postResponse = await fetch(\"/api/userRecipes\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(savedRecipe),\r\n      });\r\n\r\n      if (!postResponse.ok) {\r\n        console.error(\"Failed to post recipe to UserRecipes schema.\");\r\n        setError(`Failed to save recipe with ID ${recipeId}.`);\r\n        return;\r\n      }\r\n\r\n      console.log(\"Recipe saved successfully:\", savedRecipe);\r\n    } catch (error) {\r\n      console.error(\"Error during fetch:\", error);\r\n      setError(`Error during fetch: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"recipes\">\r\n      {recipes &&\r\n        recipes.map((recipe) => (\r\n          <div key={recipe._id}>\r\n            <img src={recipe.img} alt=\"food-img\"></img>\r\n            <p>{recipe.title}</p>\r\n            <button\r\n              className=\"save-recipe-btn\"\r\n              onClick={() => {\r\n                saveUserRecipes(recipe._id);\r\n                setError(null); // Clear any previous error when attempting to save a new recipe\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        ))}\r\n      {error && (\r\n        <div className=\"error-popup\">\r\n          <p>{error}</p>\r\n          <button onClick={() => setError(null)}>Close</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeRecipes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgBnD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAkB,IAAI,CAAC;EAC7D,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;;EAEzDC,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,EAAE,CAAC;EAEN,MAAMS,eAAe,GAAG,MAAOC,QAAgB,IAAK;IAClD,IAAI;MACF;MACA,MAAMC,sBAAsB,GAAG,MAAMC,KAAK,CACvC,oBAAmBF,QAAS,EAC/B,CAAC;MACD,IAAIC,sBAAsB,CAACE,EAAE,EAAE;QAC7B,MAAMC,cAAc,GAAG,MAAMH,sBAAsB,CAACI,IAAI,CAAC,CAAC;QAC1DP,QAAQ,CAAE,kBAAiBE,QAAS,oBAAmB,CAAC;QACxD;MACF;;MAEA;MACA,MAAMM,QAAQ,GAAG,MAAMJ,KAAK,CAAE,gBAAeF,QAAS,EAAC,CAAC;MACxD,IAAI,CAACM,QAAQ,CAACH,EAAE,EAAE;QAChBI,OAAO,CAACV,KAAK,CACV,kCAAiCG,QAAS,aAAYM,QAAQ,CAACE,MAAO,EACzE,CAAC;QACDV,QAAQ,CAAE,kCAAiCE,QAAS,GAAE,CAAC;QACvD;MACF;MACA,MAAMS,WAAW,GAAG,MAAMH,QAAQ,CAACD,IAAI,CAAC,CAAC;;MAEzC;MACA,MAAMK,YAAY,GAAG,MAAMR,KAAK,CAAC,kBAAkB,EAAE;QACnDS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACC,YAAY,CAACP,EAAE,EAAE;QACpBI,OAAO,CAACV,KAAK,CAAC,8CAA8C,CAAC;QAC7DC,QAAQ,CAAE,iCAAgCE,QAAS,GAAE,CAAC;QACtD;MACF;MAEAO,OAAO,CAACS,GAAG,CAAC,4BAA4B,EAAEP,WAAW,CAAC;IACxD,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CC,QAAQ,CAAE,uBAAsBD,KAAK,CAACoB,OAAQ,EAAC,CAAC;IAClD;EACF,CAAC;EAED,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,SAAS;IAAAC,QAAA,GACrBxB,OAAO,IACNA,OAAO,CAACyB,GAAG,CAAEC,MAAM,iBACjB7B,OAAA;MAAA2B,QAAA,gBACE3B,OAAA;QAAK8B,GAAG,EAAED,MAAM,CAACE,GAAI;QAACC,GAAG,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3CpC,OAAA;QAAA2B,QAAA,EAAIE,MAAM,CAACQ;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBpC,OAAA;QACE0B,SAAS,EAAC,iBAAiB;QAC3BY,OAAO,EAAEA,CAAA,KAAM;UACb/B,eAAe,CAACsB,MAAM,CAACU,GAAG,CAAC;UAC3BjC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAClB,CAAE;QAAAqB,QAAA,EACH;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAXDP,MAAM,CAACU,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYf,CACN,CAAC,EACH/B,KAAK,iBACJL,OAAA;MAAK0B,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B3B,OAAA;QAAA2B,QAAA,EAAItB;MAAK;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdpC,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMhC,QAAQ,CAAC,IAAI,CAAE;QAAAqB,QAAA,EAAC;MAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClC,EAAA,CA/EQD,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AAiFpB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}