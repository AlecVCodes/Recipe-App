{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alect\\\\Contacts\\\\Desktop\\\\recipe-app\\\\src\\\\svg\\\\Chevron.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chevron({\n  rotation,\n  onClick\n}) {\n  _s();\n  const [showChevron, setShowChevron] = useState(false);\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth > 1000) {\n        setShowChevron(false);\n        console.log(\"Window width is above 1000px\");\n      } else {\n        setShowChevron(true);\n      }\n    };\n\n    // Add resize event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Initial check\n    handleResize();\n\n    // Cleanup the event listener on component unmount\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    className: \"footer-chevron\",\n    width: \"20\",\n    height: \"20\",\n    viewBox: \"0 0 20 20\",\n    fill: \"#fff\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    style: {\n      transition: \"transform 0.3s\",\n      transform: `rotate(${rotation}deg)`,\n      cursor: \"pointer\",\n      display: showChevron ? \"block\" : \"none\"\n    },\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(\"path\", {\n      d: \"M10 13.75L3.75 7.5L4.625 6.625L10 12L15.375 6.625L16.25 7.5L10 13.75Z\",\n      fill: \"#fff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Chevron, \"jxklUkbRA/aF0jhZz5m5Ud68uFo=\");\n_c = Chevron;\nexport default Chevron;\nvar _c;\n$RefreshReg$(_c, \"Chevron\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Chevron","rotation","onClick","_s","showChevron","setShowChevron","handleResize","window","innerWidth","console","log","addEventListener","removeEventListener","className","width","height","viewBox","fill","xmlns","style","transition","transform","cursor","display","children","d","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/src/svg/Chevron.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\ninterface ChevronProps {\r\n  rotation: number;\r\n  onClick: () => void;\r\n}\r\n\r\nfunction Chevron({ rotation, onClick }: ChevronProps) {\r\n  const [showChevron, setShowChevron] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (window.innerWidth > 1000) {\r\n        setShowChevron(false);\r\n        console.log(\"Window width is above 1000px\");\r\n      } else {\r\n        setShowChevron(true);\r\n\r\n      }\r\n    };\r\n\r\n    // Add resize event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Initial check\r\n    handleResize();\r\n\r\n    // Cleanup the event listener on component unmount\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <svg\r\n      className=\"footer-chevron\"\r\n      width=\"20\"\r\n      height=\"20\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill=\"#fff\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      style={{\r\n        transition: \"transform 0.3s\",\r\n        transform: `rotate(${rotation}deg)`,\r\n        cursor: \"pointer\",\r\n        display: showChevron ? \"block\" : \"none\",\r\n      }}\r\n      onClick={onClick}\r\n    >\r\n      <path\r\n        d=\"M10 13.75L3.75 7.5L4.625 6.625L10 12L15.375 6.625L16.25 7.5L10 13.75Z\"\r\n        fill=\"#fff\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Chevron;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnD,SAASC,OAAOA,CAAC;EAAEC,QAAQ;EAAEC;AAAsB,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAErDC,SAAS,CAAC,MAAM;IACd,MAAMS,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIC,MAAM,CAACC,UAAU,GAAG,IAAI,EAAE;QAC5BH,cAAc,CAAC,KAAK,CAAC;QACrBI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC7C,CAAC,MAAM;QACLL,cAAc,CAAC,IAAI,CAAC;MAEtB;IACF,CAAC;;IAED;IACAE,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEL,YAAY,CAAC;;IAE/C;IACAA,YAAY,CAAC,CAAC;;IAEd;IACA,OAAO,MAAM;MACXC,MAAM,CAACK,mBAAmB,CAAC,QAAQ,EAAEN,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IACEc,SAAS,EAAC,gBAAgB;IAC1BC,KAAK,EAAC,IAAI;IACVC,MAAM,EAAC,IAAI;IACXC,OAAO,EAAC,WAAW;IACnBC,IAAI,EAAC,MAAM;IACXC,KAAK,EAAC,4BAA4B;IAClCC,KAAK,EAAE;MACLC,UAAU,EAAE,gBAAgB;MAC5BC,SAAS,EAAG,UAASpB,QAAS,MAAK;MACnCqB,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAEnB,WAAW,GAAG,OAAO,GAAG;IACnC,CAAE;IACFF,OAAO,EAAEA,OAAQ;IAAAsB,QAAA,eAEjBzB,OAAA;MACE0B,CAAC,EAAC,uEAAuE;MACzER,IAAI,EAAC;IAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC1B,EAAA,CAhDQH,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAkDhB,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}