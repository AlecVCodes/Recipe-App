{"ast":null,"code":"var _s = $RefreshSig$();\nimport { UseAuthContext } from \"./useAuthContext\";\nimport { useState, useEffect } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  // Context\n  const {\n    dispatch\n  } = UseAuthContext();\n  useEffect(() => {\n    const checkTokenExpiration = () => {\n      const userToken = localStorage.getItem(\"user\");\n      console.log(userToken, 'userToken');\n      if (userToken) {\n        try {\n          const decodedToken = jwtDecode(userToken);\n          if (decodedToken.exp && typeof decodedToken.exp === \"number\") {\n            if (decodedToken.exp * 1000 < Date.now()) {\n              // Token has expired, remove user and dispatch logout\n              localStorage.removeItem(\"user\");\n              dispatch({\n                type: \"LOGOUT\"\n              });\n            }\n          } else {\n            console.error(\"Invalid token structure: 'exp' property is missing or not a number\");\n          }\n        } catch (error) {\n          console.error(\"Error decoding token:\", error);\n          // Handle token decoding error if needed\n        }\n      }\n    };\n\n    checkTokenExpiration();\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const data = {\n      email,\n      password\n    };\n    try {\n      const response = await fetch(\"/api/user/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        const json = await response.json();\n        setIsLoading(false);\n        setError(json.error);\n        localStorage.removeItem(\"user\");\n        console.log(\"We don't have a user\");\n        return;\n      }\n      const json = await response.json();\n\n      // Store user data from the server response in local storage\n      localStorage.setItem(\"user\", JSON.stringify(json));\n\n      // Update auth context\n      dispatch({\n        type: \"LOGIN\",\n        payload: json\n      });\n\n      // Fetch the user's role from another endpoint\n      const roleResponse = await fetch(\"/api/user/role\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${json.token}`\n        }\n      });\n      if (roleResponse.ok) {\n        const roleData = await roleResponse.json();\n        console.log(roleData, \"role data\");\n        // Update user data with the role and store it in local storage\n        const userWithRole = {\n          ...json,\n          role: roleData.role\n        };\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\n        dispatch({\n          type: \"LOGIN\",\n          payload: userWithRole\n        });\n      }\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      // Handle other login errors if needed\n      setIsLoading(false);\n      setError(\"An error occurred during login.\");\n    }\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"HdD6s3uvmymdYM0yunTRP/li3R4=\");","map":{"version":3,"names":["UseAuthContext","useState","useEffect","jwtDecode","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","checkTokenExpiration","userToken","localStorage","getItem","console","log","decodedToken","exp","Date","now","removeItem","type","login","email","password","data","response","fetch","method","headers","body","JSON","stringify","ok","json","setItem","payload","roleResponse","Authorization","token","roleData","userWithRole","role"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/hooks/useLoginHook.tsx"],"sourcesContent":["import { UseAuthContext } from \"./useAuthContext\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState<any>(null);\r\n\r\n  // Context\r\n  const { dispatch } = UseAuthContext();\r\n\r\n  useEffect(() => {\r\n    const checkTokenExpiration = () => {\r\n      const userToken = localStorage.getItem(\"user\");\r\n      \r\n      console.log(userToken, 'userToken')\r\n      if (userToken) {\r\n        \r\n        try {\r\n          const decodedToken: any = jwtDecode(userToken);\r\n            \r\n          if (decodedToken.exp && typeof decodedToken.exp === \"number\") {\r\n            if (decodedToken.exp * 1000 < Date.now()) {\r\n              // Token has expired, remove user and dispatch logout\r\n              localStorage.removeItem(\"user\");\r\n              dispatch({ type: \"LOGOUT\" });\r\n            }\r\n          } else {\r\n            console.error(\"Invalid token structure: 'exp' property is missing or not a number\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error decoding token:\", error);\r\n          // Handle token decoding error if needed\r\n        }\r\n      }\r\n    };\r\n\r\n    checkTokenExpiration();\r\n  }, []);\r\n\r\n  const login = async (email: any, password: any) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    const data = { email, password };\r\n\r\n    try {\r\n      const response = await fetch(\"/api/user/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const json = await response.json();\r\n        setIsLoading(false);\r\n        setError(json.error);\r\n        localStorage.removeItem(\"user\");\r\n        console.log(\"We don't have a user\");\r\n        return;\r\n      }\r\n\r\n      const json = await response.json();\r\n\r\n      // Store user data from the server response in local storage\r\n      localStorage.setItem(\"user\", JSON.stringify(json));\r\n\r\n      // Update auth context\r\n      dispatch({ type: \"LOGIN\", payload: json });\r\n\r\n      // Fetch the user's role from another endpoint\r\n      const roleResponse = await fetch(\"/api/user/role\", {\r\n        method: \"GET\",\r\n        headers: { Authorization: `Bearer ${json.token}` },\r\n      });\r\n\r\n      if (roleResponse.ok) {\r\n        const roleData = await roleResponse.json();\r\n        console.log(roleData, \"role data\");\r\n        // Update user data with the role and store it in local storage\r\n        const userWithRole = { ...json, role: roleData.role };\r\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\r\n        dispatch({ type: \"LOGIN\", payload: userWithRole });\r\n      }\r\n\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      // Handle other login errors if needed\r\n      setIsLoading(false);\r\n      setError(\"An error occurred during login.\");\r\n    }\r\n  };\r\n\r\n  return { login, isLoading, error };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}