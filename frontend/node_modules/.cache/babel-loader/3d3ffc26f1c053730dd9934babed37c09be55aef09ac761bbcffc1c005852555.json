{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alect\\\\Contacts\\\\Desktop\\\\recipe-app\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect } from \"react\";\n\n// Define types for state and action\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context with an initial empty object as a default value\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\n\n// Define the reducer function with proper types\nexport const authReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Define the type for AuthContextProvider props\n\n// AuthContextProvider component\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null\n  });\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    try {\n      const user = storedUser ? JSON.parse(storedUser) : null;\n      if (user) {\n        dispatch({\n          type: \"LOGIN\",\n          payload: user\n        });\n      }\n    } catch (error) {\n      console.error(\"Error parsing user data from localStorage:\", error);\n    }\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  console.log(\"AuthContext State:\", state);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"qj5MHHCJ+VE7T90ddbzdeNtalDc=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","authReducer","state","action","type","user","payload","AuthContextProvider","children","_s","dispatch","storedUser","localStorage","getItem","JSON","parse","error","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useReducer, ReactNode, useEffect } from \"react\";\r\n\r\n// Define types for state and action\r\ninterface AuthState {\r\n  [x: string]: any;\r\n  user: any; // You should replace 'any' with the actual type of your user object\r\n}\r\n\r\ninterface AuthAction {\r\n  type: \"LOGIN\" | \"LOGOUT\";\r\n  payload?: AuthState[\"user\"];\r\n}\r\n\r\n// Define the context type\r\ninterface AuthContextType {\r\n  user: AuthState;\r\n  dispatch: React.Dispatch<AuthAction>;\r\n}\r\n\r\n// Create the context with an initial empty object as a default value\r\nexport const AuthContext = createContext<AuthContextType | undefined>(\r\n  undefined\r\n);\r\n\r\n// Define the reducer function with proper types\r\nexport const authReducer = (\r\n  state: AuthState,\r\n  action: AuthAction\r\n): AuthState => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      return { ...state, user: action.payload };\r\n    case \"LOGOUT\":\r\n      return { ...state, user: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Define the type for AuthContextProvider props\r\ninterface AuthContextProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// AuthContextProvider component\r\nexport const AuthContextProvider: React.FC<AuthContextProviderProps> = ({\r\n  children,\r\n}) => {\r\n  const [state, dispatch] = useReducer(authReducer, {\r\n  \r\n    user: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n\r\n    try {\r\n      const user = storedUser ? JSON.parse(storedUser) : null;\r\n      if (user) {\r\n        dispatch({ type: \"LOGIN\", payload: user });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error parsing user data from localStorage:\", error);\r\n    }\r\n  }, []); // Empty dependency array to run the effect only once on mount\r\n\r\n  console.log(\"AuthContext State:\", state);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ ...state, dispatch }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAaC,SAAS,QAAQ,OAAO;;AAE9E;;AAWA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CACtCM,SACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CACzBC,KAAgB,EAChBC,MAAkB,KACJ;EACd,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,OAAO;MACV,OAAO;QAAE,GAAGF,KAAK;QAAEG,IAAI,EAAEF,MAAM,CAACG;MAAQ,CAAC;IAC3C,KAAK,QAAQ;MACX,OAAO;QAAE,GAAGJ,KAAK;QAAEG,IAAI,EAAE;MAAK,CAAC;IACjC;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;;AAKA;AACA,OAAO,MAAMK,mBAAuD,GAAGA,CAAC;EACtEC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGf,UAAU,CAACM,WAAW,EAAE;IAEhDI,IAAI,EAAE;EACR,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAI;MACF,MAAMR,IAAI,GAAGM,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,IAAI;MACvD,IAAIN,IAAI,EAAE;QACRK,QAAQ,CAAC;UAAEN,IAAI,EAAE,OAAO;UAAEE,OAAO,EAAED;QAAK,CAAC,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACpE;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEhB,KAAK,CAAC;EAExC,oBACEJ,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAE,GAAGlB,KAAK;MAAEQ;IAAS,CAAE;IAAAF,QAAA,EACjDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACf,EAAA,CA5BWF,mBAAuD;AAAAkB,EAAA,GAAvDlB,mBAAuD;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}