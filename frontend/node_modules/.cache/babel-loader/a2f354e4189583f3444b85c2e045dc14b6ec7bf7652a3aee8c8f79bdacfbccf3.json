{"ast":null,"code":"var _s = $RefreshSig$();\nimport { UseAuthContext } from \"./useAuthContext\";\nimport { useState } from \"react\";\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  // Context\n  const {\n    dispatch\n  } = UseAuthContext();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const data = {\n      email,\n      password\n    };\n    const response = await fetch(\"/api/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const json = await response.json();\n      setIsLoading(false);\n      setError(json.error);\n      console.log(json.error, \"JSON ERROR\");\n    }\n    if (response.ok) {\n      const json = await response.json();\n\n      // Store user data from the server response in local storage\n      localStorage.setItem(\"user\", JSON.stringify(json));\n\n      // Update auth context\n      dispatch({\n        type: \"LOGIN\",\n        payload: json\n      });\n\n      // Fetch the user's role from another endpoint\n      const roleResponse = await fetch(\"/api/user/role\", {\n        method: \"GET\",\n        headers: {\n          \"Authorization\": `Bearer ${json.token}`\n        }\n      });\n      if (roleResponse.ok) {\n        const roleData = await roleResponse.json();\n        console.log(roleData, \"role data\");\n\n        // Update user data with the role and store it in local storage\n        const userWithRole = {\n          ...json,\n          role: roleData.role\n        };\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\n        dispatch({\n          type: \"LOGIN\",\n          payload: userWithRole\n        });\n\n        // Check if the token has expired\n        const isTokenExpired = isTokenExpired(json.token);\n        if (isTokenExpired) {\n          // Token has expired, remove user from local storage\n          dispatch({\n            type: \"LOGOUT\"\n          }); // Assuming you have a LOGOUT action to clear the user state\n          localStorage.removeItem(\"user\");\n        }\n      }\n      setIsLoading(false);\n    }\n  };\n  const isTokenExpired = token => {\n    const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\n    return decodedToken.exp * 1000 < Date.now();\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"oSmfmuW5T4Yczc8SMzWJFCrcXbA=\");","map":{"version":3,"names":["UseAuthContext","useState","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","login","email","password","data","response","fetch","method","headers","body","JSON","stringify","ok","json","console","log","localStorage","setItem","type","payload","roleResponse","token","roleData","userWithRole","role","isTokenExpired","removeItem","decodedToken","parse","atob","split","exp","Date","now"],"sources":["C:/Users/alect/Contacts/Desktop/recipe-app/frontend/src/hooks/useLoginHook.tsx"],"sourcesContent":["import { UseAuthContext } from \"./useAuthContext\";\r\nimport { useState } from \"react\";\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState<any>(null);\r\n\r\n  // Context\r\n  const { dispatch } = UseAuthContext();\r\n\r\n  const login = async (email: any, password: any) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    const data = { email, password };\r\n\r\n    const response = await fetch(\"/api/user/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const json = await response.json();\r\n      setIsLoading(false);\r\n      setError(json.error);\r\n      console.log(json.error, \"JSON ERROR\");\r\n    }\r\n\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n\r\n      // Store user data from the server response in local storage\r\n      localStorage.setItem(\"user\", JSON.stringify(json));\r\n\r\n      // Update auth context\r\n      dispatch({ type: \"LOGIN\", payload: json });\r\n\r\n      // Fetch the user's role from another endpoint\r\n      const roleResponse = await fetch(\"/api/user/role\", {\r\n        method: \"GET\",\r\n        headers: { \"Authorization\": `Bearer ${json.token}` },\r\n      });\r\n\r\n      if (roleResponse.ok) {\r\n        const roleData = await roleResponse.json();\r\n        console.log(roleData, \"role data\");\r\n\r\n        // Update user data with the role and store it in local storage\r\n        const userWithRole = { ...json, role: roleData.role };\r\n        localStorage.setItem(\"user\", JSON.stringify(userWithRole));\r\n        dispatch({ type: \"LOGIN\", payload: userWithRole });\r\n\r\n        // Check if the token has expired\r\n        const isTokenExpired = isTokenExpired(json.token);\r\n        if (isTokenExpired) {\r\n          // Token has expired, remove user from local storage\r\n          dispatch({ type: \"LOGOUT\" }); // Assuming you have a LOGOUT action to clear the user state\r\n          localStorage.removeItem(\"user\");\r\n        }\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const isTokenExpired = (token) => {\r\n    const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\r\n    return decodedToken.exp * 1000 < Date.now();\r\n  };\r\n\r\n  return { login, isLoading, error };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}